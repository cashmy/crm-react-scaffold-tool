import axios, { AxiosResponse } from 'axios';
import authHeader from "../authHeader.ts";

const baseUrl = process.env.BASE_API_URL;
const API_URL = baseUrl + "{{name}}/";

class {{pascalCase name}}Service {
  getAllRecords = (): Promise<AxiosResponse<any>> => axios.get(API_URL, { headers: authHeader() });

  getRecordById = (id: number): Promise<AxiosResponse<any>> => axios.get(API_URL + `${id}/`, { headers: authHeader() });

  addRecord = (data: any): Promise<AxiosResponse<any>> => axios.post(API_URL, data, { headers: authHeader() });

  updateRecord = (data: any): Promise<any> =>
    axios.put(API_URL + `${data.id}/`, data, { headers: authHeader() }).then((r) => r.data);

  deleteRecord = (id: number): Promise<any> =>
    axios.delete(API_URL + `${id}`, { headers: authHeader() }).then((r) => r.data);

  {{#if (includes extras "getAllRecordsByUser")}}
  getAllRecordsByUser = (userId = 1): Promise<AxiosResponse<any>> =>
    axios.get(API_URL + `user/${userId}`, { headers: authHeader() });
  {{/if}}

  {{#if (includes extras "getAllRecordsByActiveSts")}}
  getAllRecordsByActiveSts = (status: string): Promise<AxiosResponse<any>> =>
    axios.get(API_URL + `archive/${status}`, { headers: authHeader() });
  {{/if}}

  {{#if (includes extras "getRecordByName")}}
  getRecordByName = (name: string): Promise<AxiosResponse<any>> =>
    axios.get(API_URL + `name/${name}/`, { headers: authHeader() });
  {{/if}}

  {{#if (includes extras "patchRecordSts")}}
  patchRecordSts = (id: number, sts: string): Promise<any> =>
    axios.patch(API_URL + `${id}/${sts}`, { headers: authHeader() }).then((r) => r.data);
  {{/if}}
}

export default new {{pascalCase name}}Service();
