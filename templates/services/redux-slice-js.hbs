import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import {{pascalCase name}}Service from './{{camelCase name}}.service';

// Define the initial state shape separately for reusability
const initialState = {
  items: [],
  loading: false,
  error: null,
};

export const fetch{{pascalCase name}}s = createAsyncThunk(
  '{{camelCase name}}/fetchAll',
  async () => {
    const response = await {{pascalCase name}}Service.getAllRecords();
    return response.data;
  }
);

const {{camelCase name}}Slice = createSlice({
  name: '{{camelCase name}}',
  initialState,
  reducers: {
    // Add a reducer to reset the state back to initial
    resetState: () => initialState,
  },
  extraReducers: (builder) => {
    builder
      .addCase(fetch{{pascalCase name}}s.pending, (state) => {
        state.loading = true;
      })
      .addCase(fetch{{pascalCase name}}s.fulfilled, (state, action) => {
        state.loading = false;
        state.items = action.payload;
      })
      .addCase(fetch{{pascalCase name}}s.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error;
      });
  },
});

export const { resetState } = {{camelCase name}}Slice.actions;
export default {{camelCase name}}Slice.reducer;