import { describe, it, expect, vi, beforeEach } from 'vitest';
import {{pascalCase name}}Service from './{{camelCase name}}.service';
import axios from 'axios';

// Mock axios and provide a default export containing the mocked methods
vi.mock("axios", () => ({
  default: {
    get: vi.fn(() => Promise.resolve({ data: {} })),
    post: vi.fn(() => Promise.resolve({ data: {} })),
    put: vi.fn(() => Promise.resolve({ data: {} })),
    delete: vi.fn(() => Promise.resolve({ data: {} })),
    patch: vi.fn(() => Promise.resolve({ data: {} })),
  },
}));

// Mock the authHeader function as it's used by the service
vi.mock("../authHeader", () => ({
  default: vi.fn(() => ({ Authorization: "Bearer test-token" })), // Return a sample header object
}));

describe('{{pascalCase name}}Service', () => {
  // Clear mocks before each test to ensure isolation
  beforeEach(() => {
    vi.clearAllMocks();
  });

  it('should call getAllRecords', () => {
    {{pascalCase name}}Service.getAllRecords();
    expect(axios.get).toHaveBeenCalledTimes(1);
    expect(axios.get).toHaveBeenCalledWith(
      expect.stringContaining("{{name}}/"), // Check base URL part
      { headers: { Authorization: "Bearer test-token" } }, // Check headers are passed
    );
  });

  it('should call getRecordById', () => {
    const id: number = 1;
    {{pascalCase name}}Service.getRecordById(id);
    expect(axios.get).toHaveBeenCalledTimes(1);
    expect(axios.get).toHaveBeenCalledWith(
      expect.stringContaining(`{{name}}/${id}/`), // Check base URL part with ID
      { headers: { Authorization: "Bearer test-token" } }, // Check headers are passed
    );
  });

  it('should call addRecord', () => {
    const payload: Record<string, any> = { name: 'Test' };
    {{pascalCase name}}Service.addRecord(payload);
    expect(axios.post).toHaveBeenCalledTimes(1);
    expect(axios.post).toHaveBeenCalledWith(
      expect.stringContaining("{{name}}/"),
      payload,
      { headers: { Authorization: "Bearer test-token" } }, // Check headers are passed
    );
  });

  it('should call updateRecord', () => {
    const payload: { id: number; [key: string]: any } = { id: 1, name: 'Test' };
    {{pascalCase name}}Service.updateRecord(payload);
    expect(axios.put).toHaveBeenCalledTimes(1);
    expect(axios.put).toHaveBeenCalledWith(
      expect.stringContaining(`{{name}}/${payload.id}/`), // Check base URL part with ID
      payload,
      { headers: { Authorization: "Bearer test-token" } }, // Check headers are passed
    );
  });

  it('should call deleteRecord', async () => {
    const id: number = 1;
    await {{pascalCase name}}Service.deleteRecord(id);
    expect(axios.delete).toHaveBeenCalledTimes(1);
    expect(axios.delete).toHaveBeenCalledWith(
      expect.stringContaining(`{{name}}/${id}`), // Check base URL part with ID
      { headers: { Authorization: "Bearer test-token" } }, // Check headers
    );
  });

  {{#if (includes extras "getAllRecordsByUser")}}
  it('should call getAllRecordsByUser', () => {
    const userId: number = 5;
    {{pascalCase name}}Service.getAllRecordsByUser(userId);
    expect(axios.get).toHaveBeenCalledTimes(1);
    expect(axios.get).toHaveBeenCalledWith(
      expect.stringContaining(`user/${userId}`), // Check URL part with user ID
      { headers: { Authorization: "Bearer test-token" } }, // Check headers are passed
    );
  });
  {{/if}}

  {{#if (includes extras "getAllRecordsByActiveSts")}}
  it('should call getAllRecordsByActiveSts', () => {
    const status: string = 'active';
    {{pascalCase name}}Service.getAllRecordsByActiveSts(status);
    expect(axios.get).toHaveBeenCalledTimes(1);
    expect(axios.get).toHaveBeenCalledWith(
      expect.stringContaining(`archive/${status}`), // Check URL with status
      { headers: { Authorization: "Bearer test-token" } }, // Check headers are passed
    );
  });
  {{/if}}

  {{#if (includes extras "getRecordByName")}}
  it('should call getRecordByName', () => {
    const dataName: string = 'Test name';
    {{pascalCase name}}Service.getRecordByName(dataName);
    expect(axios.get).toHaveBeenCalledTimes(1);
    expect(axios.get).toHaveBeenCalledWith(
      expect.stringContaining(`{{name}}/name/${dataName}/`), // Check URL with name
      { headers: { Authorization: "Bearer test-token" } }, // Check headers are passed
    );
  });
  {{/if}}

  {{#if (includes extras "patchRecordSts")}}
  it('should call patchRecordSts', async () => {
    const id: number = 1;
    const sts: string = 'active';
    await {{pascalCase name}}Service.patchRecordSts(id, sts);
    expect(axios.patch).toHaveBeenCalledTimes(1);
    expect(axios.patch).toHaveBeenCalledWith(
      expect.stringContaining(`{{name}}/${id}/${sts}`),
      { headers: { Authorization: "Bearer test-token" } },
    );
  });
  {{/if}}
});
