import { describe, it, expect, vi } from 'vitest';
import {{pascalCase name}}Service from './{{camelCase name}}.service';
import axios from 'axios';

vi.mock('axios');

describe('{{pascalCase name}}Service', () => {
  it('should call getAllRecords', () => {
    {{pascalCase name}}Service.getAllRecords();
    expect(axios.get).toHaveBeenCalled();
  });

  it('should call addRecord', () => {
    const payload = { name: 'Test' };
    {{pascalCase name}}Service.addRecord(payload);
    expect(axios.post).toHaveBeenCalledWith(expect.stringContaining('{{name}}'), payload, expect.anything());
  });

  it('should call updateRecord', () => {
    const payload = { id: 1, name: 'Test' };
    {{pascalCase name}}Service.updateRecord(payload);
    expect(axios.put).toHaveBeenCalledWith(expect.stringContaining('{{name}}'), payload, expect.anything());
  }); 

  it('should call deleteRecord', () => {
    const id = 1;
    {{pascalCase name}}Service.deleteRecord(id);
    expect(axios.delete).toHaveBeenCalledWith(expect.stringContaining('{{name}}'), { data: { id } });
  });

  {{#if (includes extras "getAllRecordsByUser")}}
  it('should call getAllRecordsByUser', () => {
    const userId = 1;
    {{pascalCase name}}Service.getAllRecordsByUser(userId);
    expect(axios.get).toHaveBeenCalledWith(expect.stringContaining(`user/${userId}`), expect.anything());
  });
  {{/if}}

  {{#if (includes extras "getAllRecordsByActiveSts")}}
  it('should call getAllRecordsByActiveSts', () => {
    const status = 'active';
    {{pascalCase name}}Service.getAllRecordsByActiveSts(status);
    expect(axios.get).toHaveBeenCalledWith(expect.stringContaining(`archive/${status}`), expect.anything());
  });
  {{/if}}

  {{#if (includes extras "getRecordByName")}}
  it('should call getRecordByName', () => {
    const name = 'Test';
    {{pascalCase name}}Service.getRecordByName(name);
    expect(axios.get).toHaveBeenCalledWith(expect.stringContaining(`name/${name}/`), expect.anything());
  });
  {{/if}}

  {{#if (includes extras "patchRecordSts")}}
  it('should call patchRecordSts', () => {
    const id = 1;
    const sts = 'active';
    {{pascalCase name}}Service.patchRecordSts(id, sts);
    expect(axios.patch).toHaveBeenCalledWith(expect.stringContaining(`/${id}/${sts}`), expect.anything(), expect.anything());
  });
  {{/if}}

});
